#cloud-config

# This cloud-init script is used for provisioning a VM with installed powershell and scripts for
# the test_create_azure_vm_from_azure_image. The template for this provisioning must run RHEL7 and
# have a second disk of 50 G for downloading the CFME image. This disk is mounted in /mnt/space
# and all necessary scripts are placed there.
#
# The script doesn't work as is: you need to specify necessary values for your Azure configuration,
# such as Azure credentials. You might need to create resource groups, storage accounts etc.
#
# In case of Powershell errors, you can set $DebugPreference = Continue to see the debug output.
# To set it back set $DebugPreference = SilentlyContinue

password: $pass
chpasswd: { expire: False }
ssh_pwauth: True

runcmd:
    # Register the Microsoft RedHat repository
  - [ curl, -o,  "/etc/yum.repos.d/microsoft.repo", "https://packages.microsoft.com/config/rhel/7/
  prod.repo"]
  - [ yum,  install,  -y, powershell ]
  - [ pwsh, -c, "Install-Module -Name Az -AllowClobber -Force" ]
  - [ mkdir, /mnt/space ]

write_files:
  - content: |
        # https://docs.microsoft.com/en-us/powershell/azure/authenticate-azureps
        $tenantId = "<tenant_id>"
        $passwd = ConvertTo-SecureString <password> -AsPlainText -Force
        $pscredential = New-Object System.Management.Automation.PSCredential('<client_id>', $passwd)
        Connect-AzAccount -ServicePrincipal -Credential $pscredential -TenantId $tenantId
    path: /mnt/space/connect_account.ps1
  - content: |
        $PublicIPName = "<ip_name>"
        $ResourceGroupName = "<rg_name>"
        Get-AzPublicIpAddress -Name $PublicIPName -ResourceGroupName $ResourceGroupName
    path: /mnt/space/get_ip.ps1
  - content: |
        $BlobNameSource = "<name_of_the_image, updated in the test automatically>"

        # Select your subscription
        $SubscriptionName = "<subscription_name>"

        Select-AzSubscription -SubscriptionName $SubscriptionName

        $ResourceGroupName = "<rg_name>"
        $StorageAccountName = "<sa_name>"
        $BlobSourceContainer = "<bs_container>"

        # path to the image locally
        $LocalImagePath = "/mnt/space/$BlobNameSource"

        Add-AzVhd -ResourceGroupName $ResourceGroupName -Destination "http://$StorageAccountName.blob.core.windows.net/$BlobSourceContainer/$BlobNameSource" -LocalFilePath $LocalImagePath -NumberOfUploaderThreads 8 -OverWrite

    path: /mnt/space/upload_vhd.ps1
  - content: |
        $BlobNameSource = "<name_of_the_image, updated in the test automatically>"
        $BlobNameDest = "updated in the test automatically"
        $VMName = "<name_of_the_vm, updated in the test automatically>"

        $ResourceGroupName = "<rg_name>"
        $StorageAccountName = "<sa_name>"
        $BlobSourceContainer = "<bs_container>"

        ## Customize for Your Environment

        $BlobDestinationContainer = "<bd_container>"
        $DeploySize= "<deploy_size>"

        $InterfaceName = "<interface_name>"
        $VNetName = "<vnet_name>"
        $PublicIPName = "<public_ip_name>"

        $StorageAccount = Get-AzStorageAccount -ResourceGroup $ResourceGroupName -Name $StorageAccountName

        $SourceImageUri = "https://$StorageAccountName.blob.core.windows.net/$BlobSourceContainer/$BlobNameSource"
        $Location = $StorageAccount.Location
        $OSDiskName = $VMName

        # Network
        $Subnet1Name = "default"
        $VNetAddressPrefix = "10.1.0.0/16"
        $VNetSubnetAddressPrefix = "10.1.0.0/24"
        $PIp = New-AzPublicIpAddress -Name $PublicIPName -ResourceGroupName $ResourceGroupName -Location $Location -AllocationMethod Dynamic -Force
        $SubnetConfig = New-AzVirtualNetworkSubnetConfig -Name $Subnet1Name -AddressPrefix $VNetSubnetAddressPrefix
        $VNet = New-AzVirtualNetwork -Name $VNetName -ResourceGroupName $ResourceGroupName -Location $Location -AddressPrefix $VNetAddressPrefix -Subnet $SubnetConfig -Force
        $Interface = New-AzNetworkInterface -Name $InterfaceName -ResourceGroupName $ResourceGroupName -Location $Location -SubnetId $VNet.Subnets[0].Id -PublicIpAddressId $PIp.Id -Force

        # Specify the VM Name and Size
        $VirtualMachine = New-AzVMConfig -VMName $VMName -VMSize $DeploySize

        # Add User
        $UserName="<login>"  # this user will have administrative privileges
        $Password="<password>"| ConvertTo-SecureString -Force -AsPlainText
        $cred=New-Object PSCredential($UserName,$Password)

        $VirtualMachine = Set-AzVMOperatingSystem -VM $VirtualMachine -Linux -ComputerName $VMName -Credential $cred

        # Add NIC
        $VirtualMachine = Add-AzVMNetworkInterface -VM $VirtualMachine -Id $Interface.Id

        # Add Disk
        $OSDiskUri = $StorageAccount.PrimaryEndpoints.Blob.ToString() + $BlobDestinationContainer + "/" + $BlobNameDest

        $VirtualMachine = Set-AzVMOSDisk -VM $VirtualMachine -Name $OSDiskName -VhdUri $OSDiskUri -CreateOption fromImage -SourceImageUri $SourceImageUri -Linux

        # Add Data Disk for the CFME database
        $DataDiskVhdUri01 = $StorageAccount.PrimaryEndpoints.Blob.ToString() + "blank" + "/" + $BlobNameDest

        $VirtualMachine = Add-AzVMDataDisk -VM $VirtualMachine -Name 'DataDisk1' -Caching 'ReadOnly' -DiskSizeInGB 10 -Lun 0 -VhdUri $DataDiskVhdUri01 -CreateOption Empty

        # Create the VM
        New-AzVM -ResourceGroupName $ResourceGroupName -Location $Location -VM $VirtualMachine

    path: /mnt/space/create_vm.ps1
  - content: |
        $VMName = "<vm_name"
        $ResourceGroupName = "<rg_name>"

        Remove-AzVM -ResourceGroupName $ResourceGroupName -Name $VMName
    path: /mnt/space/delete_vm.ps1


# The VM must have a second disk, recommended size is 50 GB. Preallocated disk works much faster.
# The disk will be mounted in /mnt/space - the same place where powershell scripts are located.

disk_setup:
   $disk:
       table_type: 'mbr'
       layout: True
       overwrite: False

fs_setup:
   - label: None,
     filesystem: xfs
     device: $device
     partition: auto

mounts:
 - [ $disk, /mnt/space, auto, "defaults" ]
